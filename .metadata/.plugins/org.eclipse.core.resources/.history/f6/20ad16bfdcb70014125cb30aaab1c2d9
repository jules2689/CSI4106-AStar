package game;

import java.util.ArrayList;
import java.util.Iterator;

import game.Block.BlockType;

public class GameBoard {
	
	public Block[][] gameBoard;
	
	public GameBoard(int size) {
		this.gameBoard = new Block[size][size];
		
		for (int i = 0; i < this.gameBoard.length; i++) {
			for (int j = 0; j < this.gameBoard[i].length; j++) {
				BlockType type = getBlockType(i,j);
				this.gameBoard[i][j] = new Block(type);
			}
		}
	}
	
	public void printGameBoard() {
		for (int i = 0; i < this.gameBoard.length; i++) {
			for (int j = 0; j < this.gameBoard[i].length; j++) {
				Block block = this.gameBoard[i][j];
				block.printBlock();
			}
			System.out.print('\n');
		}
	}
	
	private BlockType getBlockType(int i, int j) 
	{
		ArrayList<int[]> startPos = getPlayerStartPos();
		ArrayList<int[]> walls = getWalls(false);
		int []pos = new int[]{i,j};
		
		if (startPos.contains(pos)) {
			return BlockType.PLAYER;
		} else if (walls.contains(pos)) {
			return BlockType.WALL;
		} else if (pos == new int[]{3,3}) {
			return BlockType.GOAL;
		} else {
			return BlockType.EMPTY;
		}
	}
	
	private ArrayList<int[]> getPlayerStartPos() 
	{
		ArrayList<int[]> players = new ArrayList<int[]>();
		players.add(new int[]{0,0});
		players.add(new int[]{this.gameBoard.length - 1,0});
		players.add(new int[]{0,this.gameBoard.length - 1});
		players.add(new int[]{this.gameBoard.length - 1,this.gameBoard.length - 1});
		return players;
	}

	private ArrayList<int[]> getWalls(boolean specialGame) 
	{
		ArrayList<int[]> walls = new ArrayList<int[]>();
		walls.add(new int[]{0,3});
		walls.add(new int[]{1,1});
		walls.add(new int[]{1,4});
		walls.add(new int[]{2,1});
		walls.add(new int[]{2,4});
		walls.add(new int[]{3,1});
		walls.add(new int[]{3,2});
		walls.add(new int[]{3,3});
		walls.add(new int[]{4,2});
		walls.add(new int[]{5,2});
		walls.add(new int[]{5,3});
		walls.add(new int[]{5,4});
		if (specialGame) {
			walls.add(new int[]{6,5});
		}
		return walls;
	}
	
	private boolean listContainsArray(ArrayList<int[]> list, int [] array) {
		
	}

}
