import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import game.AStarStats;
import game.Block;
import game.GameBoard;
import game.Block.BlockType;

public class Runner {

	public static void main(String[] args) {
		GameBoard gameBoard = new GameBoard(7);
		gameBoard.printGameBoard(false);
	
		ArrayList<AStarStats> stats = new ArrayList<AStarStats>(4);
		stats.add(gameBoard.aStar(gameBoard.getBlock(0, 0)));
		stats.add(gameBoard.aStar(gameBoard.getBlock(0, 6)));
		stats.add(gameBoard.aStar(gameBoard.getBlock(6, 0)));
		stats.add(gameBoard.aStar(gameBoard.getBlock(6, 6)));
		declareWinner(stats);
	}
	
	public static void metadata(GameBoard gameBoard, int x, int y) {
		Block block = gameBoard.getBlock(x, y);
		if (block.getBlockType() != BlockType.EMPTY) {
			System.out.println(block.getBlockType() + "-> X: " + x + " Y: " + y);
			if (block.getBlockType() == BlockType.PLAYER) {
				System.out.println("Heuristic Cost: " + block.heuristicCost());
			}
			System.out.println("");
		}
	}
	
	public static void declareWinner(List<AStarStats> stats) {
		Collections.sort(stats);
		for (AStarStats stat : stats) {
			int pos = stats.indexOf(stat);
			if (pos == 0) {
				System.out.println("The Winner was player as X: " + stat.player.x + " Y: " + stat.player.y);
			} else {
				System.out.println("The player in position " + (pos + 1) + as X: " + stat.player.x + " Y: " + stat.player.y);
			}
			System.out.println("Visited " + stat.numVisited + " blocks");
			System.out.println("Length of Path was " + stat.lengthOfPath + "\n\n");
			
		}
	}

}
