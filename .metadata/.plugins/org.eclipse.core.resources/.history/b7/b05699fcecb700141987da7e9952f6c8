package game;

import java.util.ArrayList;

public class Block {
	GameBoard board;
	BlockType blockType;
	int x;
	int y;
	
	boolean visited = false;
	
	public enum BlockType {
	    WALL, GOAL, PLAYER, VOID, EMPTY
	}
	
	public Block(GameBoard board, BlockType blockType, int x, int y) {
		this.board = board;
		this.blockType = blockType;
		this.x = x;
		this.y = y;
	}
	
	public BlockType getBlockType() {
		return this.blockType;
	}
	
	public ArrayList<Block> getNeighbours() {
		ArrayList<Block> neighbours = new ArrayList<Block>(4);
		if (this.x > 0) {
			if (this.y > 0) {
				Block block = this.board.getBlock(x - 1, y - 1);
				neighbours.add(block);
			}
			if (this.y < this.board.gameBoard.length - 1) {
				Block block = this.board.getBlock(x - 1, y + 1);
				neighbours.add(block);
			}
		}
		
		if (this.x < this.board.gameBoard.length - 1) {
			if (this.y > 0) {
				Block block = this.board.getBlock(x + 1, y - 1);
				neighbours.add(block);
			}
			if (this.y < this.board.gameBoard.length - 1) {
				Block block = this.board.getBlock(x + 1, y + 1);
				neighbours.add(block);
			}
		}
		return neighbours;
	}
	
	public void printBlock(boolean traversal) {
		if (traversal) {
			if (this.visited) {
				System.out.print('V');
			} else {
				System.out.print('☐');
			}
		}
		switch (this.blockType) {
		case WALL:
			System.out.print('☒');
			break;
		case GOAL:
			System.out.print('✮');
			break;
		case PLAYER:
			System.out.print('☑');
			break;
		case EMPTY:
			System.out.print('☐');
			break;
		case VOID:
			System.out.print('X');
			break;
		}
	}
	
	// Heuristic Cost Methods
	
	// h'(x)
	public int heuristicCost() {
		return verticalDistanceToGoal() + horizontalDistanceToGoal() + numObstaclesInPath();
	}
	
	private int verticalDistanceToGoal() {
		return Math.abs(board.goal.y - this.y);
	}
	
	private int horizontalDistanceToGoal() {
		return Math.abs(board.goal.x - this.x);
	}
	
	private int numObstaclesInPath() {
		int obstacles = 0;
		
		int startY = board.goal.y > this.y ? this.y : board.goal.y;
		int endY = board.goal.y > this.y ? board.goal.y : this.y;
		for (int y = startY; y < endY; y++) {
			BlockType type = board.getBlock(this.x, y).blockType;
			if (type == BlockType.WALL) {
				obstacles++;
			}
		}
		
		int startX = board.goal.x > this.x ? this.x : board.goal.x;
		int endX = board.goal.x > this.x ? board.goal.x : this.x;
		for (int x = startX; x < endX; x++) {
			BlockType type = board.getBlock(x, board.goal.y).blockType;
			if (type == BlockType.WALL) {
				obstacles++;
			}
		}
		
		return obstacles;
	}

}
